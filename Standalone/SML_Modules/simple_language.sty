
(* ===================================================================== *)
signature PRETTYPRINT_STYLES_SIG =
sig
	type PP = PRETTYPRINT_DATATYPES.PP
	val format_list : (string * (string -> PP list)) list
end;
(* --------------------------------------------------------------------- *)
structure PRETTYPRINT_STYLES: PRETTYPRINT_STYLES_SIG =
struct
open CONCRETE_REPRESENTATION;
open PRETTYPRINT_DATATYPES;
 
   
(* ===================================================================== *)
(* --------------------------------------------------------------------- *)
(*                      Pretty Print Specification                       *)
(* --------------------------------------------------------------------- *)
(* ===================================================================== *)
(* IMPORTANT: getSubTree is a function defined in prettyprint_datatypes.sml *) 

val nl       = "\n";
val sp       = " ";
val tab      = sp ^ sp ^ sp ^ sp ^ sp; 
val tab2     = tab ^ tab;

val line     = "(* ================================================================================================================= *)"


val right_margin   = 120;


(* ------------------------------------------------------------------------------------------- *)
val leaf_node_count = ref 0;

fun auxLeafNodeCount(itree( inode      ("",_)                   , [] ) ) = ()
  | auxLeafNodeCount(itree( inode      (name,_)                 , [] ) ) = leaf_node_count := !leaf_node_count + 1
  
  | auxLeafNodeCount(t as itree(inode(name,_),children) ) =
	let
	    fun traverse( itree( inode("",_)                         , []       ) ) = ()
	      | traverse (itree( inode(name,_)                       , []       ) ) = leaf_node_count := !leaf_node_count + 1
	      |	traverse (itree( inode(name,_)                       , children ) ) = foldr (fn (t, _) => traverse t ) () children
          | traverse t                                   			  = (
											print("\n\n=========================================\n\n");
											CONCRETE_REPRESENTATION.fullPrintTree " " t;
											raise General.Fail("Error in Oberon.sty: auxLeafNodeCount.traverse.\n")
										    );
	in
	    traverse t  
	end
  | auxLeafNodeCount t = (
                         	 print("\n\n=========================================\n\n");
                         	 CONCRETE_REPRESENTATION.fullPrintTree " " t;
                         	 raise General.Fail("Error in Oberon.sty: auxLeafNodeCount.\n")
                       	      );

fun nonEmptyLeafNodeCount( i ) = 
	(
		leaf_node_count := 0;
		auxLeafNodeCount( getSubTree i );
		!leaf_node_count
	);
 
(* --------------------------------------------------------------------- *)
fun sumLeaves( i, max ) = if i > max then 0 
				  else String.size(CONCRETE.leavesToStringRaw(getSubTree i)) + sumLeaves(i+1,max)

fun makeBlanks(0) = ""
  | makeBlanks(n) = if n > 0 then " " ^ makeBlanks(n-1)
			     else raise General.Fail("Error in syle file: makeBlanks\n")
(* --------------------------------------------------------------------- *)

 
val format_list =
	[


		(* ======================================================================================================== *)
		(*                                             Expressions                                                  *)
		(* ======================================================================================================== *)		
		(* --------------------------------------------- *)
		(
			"Module ::= module id stmt_list end",
			fn LM =>
			[
				insert(nl ^ LM),
				process(1,LM),
				insert(sp),
				process(2,LM),
				insert(nl ^ LM ^ tab),
				process(3,LM ^ tab),
				insert(nl ^ LM),
				process(4,LM),
				insert(nl ^ LM)				
			]
		)
		,
		(* --------------------------------------------- *)
		(
			"block ::= { stmt_list }",
			fn LM =>
			[
				process(1,LM),
				insert(nl ^ LM ^ tab),
				process(2,LM ^ tab),
				insert(nl ^ LM),
				process(3,LM)
			]
		)
		,
		(* --------------------------------------------- *)
		(
			"stmt_list =>* stmt epsilon",
			fn LM =>
			[
				process(1,LM)
			]
		)
		,
		(* --------------------------------------------- *)
		(
			"stmt_list ::= stmt stmt_list",
			fn LM =>
			[
				process(1,LM),
				insert(nl ^ LM),
				process(2,LM)
			]
		)
		
	];
(* ===================================================================== *)

	
end; (* struct *)
(* ===================================================================== *)







